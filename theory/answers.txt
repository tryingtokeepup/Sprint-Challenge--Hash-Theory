
1. `(A ∨ ¬B)`   (alternate: `(A || !B)`)

A: 0, B: 0 Result: 1
A: 0, B: 1 Result: 0
A: 1, B: 0 Result: 1
A: 1, B: 1 Result: 1

2. `(¬A ∨ B) ∧ ¬(A ∧ ¬B)`   (alternate: `(!A || B) && !(A && !B)`)

A: 0, B: 0 Result: 1
A: 0, B: 1 Result: 1
A: 1, B: 0 Result: 0
A: 1, B: 1 Result: 1

Note: lol its turns out it's the same as the above hahaha.

3. `¬(A ∨ B) ∨ ( (A ∨ C) ∧ ¬(B ∨ ¬C) )`   (alternate: `!(A || B) || ( (A || C) && !(B || !C) )`)

A: 0, B: 0, C: 0, Result: 1
A: 0, B: 0, C: 1, Result: 1
A: 0, B: 1, C: 0, Result: 0
A: 0, B: 1, C: 1, Result: 0
A: 1, B: 0, C: 0, Result: 0
A: 1, B: 0, C: 1, Result: 1
A: 1, B: 1, C: 0, Result: 0
A: 1, B: 1, C: 1, Result: 0

Stretch: 

A: 0, B: 0, C: 0 Carry: 0, Sum: 0
A: 0, B: 0, C: 1 Carry: 0, Sum: 1
A: 0, B: 1, C: 0 Carry: 0, Sum: 1
A: 0, B: 1, C: 1 Carry: 1, Sum: 0
A: 1, B: 0, C: 0 Carry: 0, Sum: 1
A: 1, B: 0, C: 1 Carry: 1, Sum: 0
A: 1, B: 1, C: 0 Carry: 1, Sum: 0
A: 1, B: 1, C: 1 Carry: 1, Sum: 1

#include <stdio.h>

int main(void) {
  int A = 0;
  int B = 0;
  int C = 0;
  // int result;
  
  for (int i = 0; i<2; i++)
	{
		for (int j = 0; j < 2 ; j++)
		{
      for (int k = 0; k < 2; k++){
        A = i;
        B = j;
        C = k;
      printf("A: %d, B: %d, C: %d Carry: %d, Sum: %d\n", A, B, C, ((A&B) || (B&C) || (A&C)), ((A ^ B) ^ C));
      }
		}
	}

	return 0;
}